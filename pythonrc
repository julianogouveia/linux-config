#!/bin/bash


#####################################################################################
####################################### Pyenv #######################################
#####################################################################################

#   Set the default linux Python version
export PYENV_VERSION="3.5.1"

#   Set the pyenv root path
export PYENV_ROOT="$HOME/.pyenv"

#   Concatenate the pyenv path before the linux path to pyenv be founded first
export PATH="$PYENV_ROOT/bin:$PATH"

#   Load the pyenv dependences to everything works fine
eval "$(pyenv init -)"


#####################################################################################
################################# Virtualenvwrapper #################################
#####################################################################################


#   Save all created virtualenv's inside the $HOME/.virtualenvs directory.
export WORKON_HOME=$HOME/.virtualenvs

#   Load the virtualenvwrapper dependences
source /usr/local/bin/virtualenvwrapper.sh

#   Shows all created virtualenvs
alias s="lsvirtualenv -b" 

#   Exits from the current activate virtualenv
alias d="deactivate"

#   Back to the virtual activated project working directory
alias b="cd $(cat $VIRTUAL_ENV/.project)"


#   Change to a given virtualenv project name who is in ~/.virtualenvs.
#   The function looks inside the ~/.virtualenvs directory and tries 
# to find the activate virtualenv command. If it exists, the activate 
# is executed and the current directory is switched to the project directory.

p () {
	PROJECT_NAME=$1

	MESSAGES[0]="You must pass the PROJECT_NAME parameter."
	MESSAGES[1]="The project $PROJECT_NAME doesn't exists."

	if [ -z $PROJECT_NAME ]; then
		echo "${MESSAGES[0]}"
		return
	fi

	PROJECT_DIR="$WORKON_HOME/$PROJECT_NAME/"
	PROJECT_FILE="$PROJECT_DIR/.project"
	PROJECT_ACTIVATE="$PROJECT_DIR/bin/activate"

	if ! [ -a $PROJECT_ACTIVATE ] || ! [ -a $PROJECT_FILE ]; then
		echo "${MESSAGES[1]}"
		return
	fi

	source $PROJECT_ACTIVATE
	cd $(cat $PROJECT_FILE)
}


#   Create a new Python virtualenv based on the current directory

m () {
	PROJECT_NAME=$1

	MESSAGES[0]="You must pass the PROJECT_NAME parameter."

	if [ -z $PROJECT_NAME ]; then
		echo "${MESSAGES[0]}"
		return
	fi

	mkvirtualenv $PROJECT_NAME -a ./
}


#   Remove a given virtualenvwrapper project

r () {
	PROJECT_NAME=$1

	MESSAGES[0]="You must pass the PROJECT_NAME parameter."

	if [ -z $PROJECT_NAME ]; then
		echo "${MESSAGES[0]}"
		return
	fi

	rmvirtualenv $PROJECT_NAME
}